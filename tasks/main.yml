---
- name: Install ACME client
  ansible.builtin.import_tasks: install.yml

- name: Copy root certificates
  become: true
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ letsencrypt_base_dir }}/{{ letsencrypt_domain }}/"
    mode: "0640"
  with_items: "{{ letsencrypt_staging | ternary(certs_staging, certs_prod) }}"

- name: Remove root certificates
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ letsencrypt_staging | ternary(certs_prod, certs_staging) }}"

- name: Issue certificate
  ansible.builtin.import_tasks: issue.yml

- name: Install the certificate
  become: true
  ansible.builtin.command: >
    {{ letsencrypt_base_dir }}/acme.sh --install-cert
      -d "{{ letsencrypt_domain }}"
      --cert-file "{{ letsencrypt_install.cert_path }}"
      --key-file "{{ letsencrypt_install.key_path }}"
      --ca-file "{{ letsencrypt_install.ca_path }}"
      --fullchain-file "{{ letsencrypt_install.fullchain_path }}"
      --reloadcmd "{{ letsencrypt_reloadcmd }}"
  changed_when: false
  when: letsencrypt_install_mode == "install" and issue_web.changed

- name: Deploy the certificate
  become: true
  ansible.builtin.command: >
    {{ letsencrypt_base_dir }}/acme.sh --deploy
      -d "{{ letsencrypt_domain }}"
      --deploy-hook "{{ letsencrypt_deploy.staging_hook if letsencrypt_staging else letsencrypt_deploy.hook }}"
  changed_when: false
  when:
    - letsencrypt_install_mode == "deploy"
    - issue_web.changed or issue_standalone.changed
    - letsencrypt_deploy.hook != "freeipa"
    - letsencrypt_deploy.staging_hook != "freeipa_staging"

- name: Run FreeIPA specific tasks
  ansible.builtin.import_tasks: freeipa.yml
  when:
    - letsencrypt_deploy.hook == "freeipa"
    - letsencrypt_deploy.staging_hook == "freeipa_staging"
